import { Fragment, useState } from "react";
import {
  Card,
  CardContent,
  Typography,
  IconButton,
  Tooltip,
  TextField,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Avatar,
} from "@mui/material";
import {
  Visibility as VisibilityIcon,
  ListAltOutlined as ListAltOutlinedIcon,
  ContentCopy as ContentCopyIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
} from "@mui/icons-material";

/** Utility to gracefully format whatever timestamp shape we receive */
const formatTimestamp = (ts) => {
  if (!ts) return "";

  // Firestore Timestamp instance
  if (typeof ts.toDate === "function") {
    return ts.toDate().toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    });
  }

  // Object that looks like { seconds: <int> }
  if ("seconds" in ts) {
    return new Date(ts.seconds * 1000).toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    });
  }

  // Plain JS Date or epoch number
  const date = ts instanceof Date ? ts : new Date(ts);
  if (isNaN(date)) return "";
  return date.toLocaleDateString("en-US", {
    month: "short",
    day: "numeric",
    year: "numeric",
  });
};

export default function TripList(props) {
  const [expand, setExpand] = useState(false);
  const [singleContent, setSingleContent] = useState();
  const [searchQuery, setSearchQuery] = useState("");
  const [editOpen, setEditOpen] = useState(false);
  const [deleteOpen, setDeleteOpen] = useState(false);
  const [selectedLesson, setSelectedLesson] = useState(null);
  const [editedTitle, setEditedTitle] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const lessons = props.lessons?.generatedLessons || [];

  const filteredLessons = lessons.filter((lesson) => {
    const searchLower = searchQuery.toLowerCase();
    const lessonDate = formatTimestamp(lesson.timestamp).toLowerCase();

    return (
      (lesson.lessonTitle || lesson.tripTitle || "")
        .toLowerCase()
        .includes(searchLower) ||
      (lesson.subject || lesson.destination || "")
        .toLowerCase()
        .includes(searchLower) ||
      (lesson.grade || lesson.specificPlace || "")
        .toLowerCase()
        .includes(searchLower) ||
      lessonDate.includes(searchLower)
    );
  });

  const handleEdit = (lesson) => {
    setSelectedLesson(lesson);
    setEditedTitle(lesson.lessonTitle || lesson.tripTitle);
    setEditOpen(true);
  };

  const handleDelete = (lesson) => {
    setSelectedLesson(lesson);
    setDeleteOpen(true);
  };

  const confirmEdit = async () => {
    setIsLoading(true);
    try {
      const response = await fetch("/api/firebase-config", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          originalLesson: selectedLesson,
          newTitle: editedTitle,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to update lesson");
      }

      const updatedLessons = await response.json();
      props.onUpdate(updatedLessons);
      await props.refreshLessons();
      setEditOpen(false);
    } catch (error) {
      console.error("Error updating lesson:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const confirmDelete = async () => {
    setIsLoading(true);
    try {
      const response = await fetch("/api/firebase-config", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          lessonToDelete: selectedLesson,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to delete lesson");
      }

      const updatedLessons = await response.json();
      props.onUpdate(updatedLessons);
      await props.refreshLessons();
      setDeleteOpen(false);
    } catch (error) {
      console.error("Error deleting lesson:", error);
    } finally {
      setIsLoading(false);
    }
  };

  function viewLesson(lessonData) {
    setSingleContent(
      <Card key={lessonData.timestamp}>
        <CardContent sx={{ paddingBottom: 1 }}>
          <Typography variant="h5">
            {lessonData.lessonTitle || lessonData.tripTitle}
          </Typography>
          <div
            style={{
              display: "grid",
              gridAutoFlow: "column",
              justifyContent: "start",
              alignItems: "center",
              gap: 10,
              paddingTop: 3,
            }}
          >
            <Avatar
              sx={{ width: 24, height: 24 }}
              src={lessonData.user && lessonData.user.photoURL}
            />
            <Typography variant="subtitle1">
              Generated by {props.lessons.displayName || "Anonymous"}
            </Typography>
          </div>
          <div style={{ display: "flex", gap: "8px", marginTop: "8px" }}>
            <Tooltip title="Back to List">
              <IconButton onClick={() => setExpand(false)}>
                <ListAltOutlinedIcon color="primary" fontSize="medium" />
              </IconButton>
            </Tooltip>
            <Tooltip title="Copy to clipboard">
              <IconButton
                onClick={() =>
                  navigator.clipboard.writeText(
                    lessonData.generatedLesson || lessonData.generatedTrip
                  )
                }
              >
                <ContentCopyIcon color="primary" fontSize="medium" />
              </IconButton>
            </Tooltip>
          </div>
        </CardContent>
        <CardContent>
          <Typography
            sx={{ whiteSpace: "pre-line", marginTop: -3 }}
            variant="body1"
          >
            {lessonData.generatedLesson || lessonData.generatedTrip}
          </Typography>
        </CardContent>
      </Card>
    );
    setExpand(true);
  }

  const renderLessonTable = () => (
    <>
      <TextField
        label="Search Trips"
        variant="outlined"
        fullWidth
        margin="normal"
        value={searchQuery}
        onChange={(e) => setSearchQuery(e.target.value)}
        placeholder="Search by trip name, destination, specific place, or date..."
      />
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell align="center">Actions</TableCell>
              <TableCell>Trips</TableCell>
              <TableCell align="right">Destination</TableCell>
              <TableCell align="right">Specific Place</TableCell>
              <TableCell align="right">Date</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filteredLessons.map((row, index) => (
              <TableRow key={index}>
                <TableCell align="center">
                  <div
                    style={{
                      display: "flex",
                      gap: "4px",
                      justifyContent: "center",
                    }}
                  >
                    <Tooltip title="View">
                      <IconButton onClick={() => viewLesson(row)}>
                        <VisibilityIcon color="primary" fontSize="small" />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="Edit">
                      <IconButton onClick={() => handleEdit(row)}>
                        <EditIcon color="primary" fontSize="small" />
                      </IconButton>
                    </Tooltip>
                    <Tooltip title="Delete">
                      <IconButton onClick={() => handleDelete(row)}>
                        <DeleteIcon color="error" fontSize="small" />
                      </IconButton>
                    </Tooltip>
                  </div>
                </TableCell>
                <TableCell>{row.lessonTitle || row.tripTitle}</TableCell>
                <TableCell align="right">
                  {row.subject || row.destination}
                </TableCell>
                <TableCell align="right">
                  {row.grade || row.specificPlace}
                </TableCell>
                <TableCell align="right">
                  {formatTimestamp(row.timestamp)}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
    </>
  );

  const renderDialogs = () => (
    <>
      <Dialog open={editOpen} onClose={() => setEditOpen(false)}>
        <DialogTitle>Edit Lesson</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Lesson Title"
            fullWidth
            value={editedTitle}
            onChange={(e) => setEditedTitle(e.target.value)}
            disabled={isLoading}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setEditOpen(false)} disabled={isLoading}>
            Cancel
          </Button>
          <Button onClick={confirmEdit} color="primary" disabled={isLoading}>
            {isLoading ? "Saving..." : "Save"}
          </Button>
        </DialogActions>
      </Dialog>

      <Dialog open={deleteOpen} onClose={() => setDeleteOpen(false)}>
        <DialogTitle>Delete Trip</DialogTitle>
        <DialogContent>
          Are you sure you want to delete this Trip?
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDeleteOpen(false)} disabled={isLoading}>
            Cancel
          </Button>
          <Button onClick={confirmDelete} color="error" disabled={isLoading}>
            {isLoading ? "Deleting..." : "Delete"}
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );

  return (
    <Fragment>
      {expand ? singleContent : renderLessonTable()}
      {renderDialogs()}
    </Fragment>
  );
}
